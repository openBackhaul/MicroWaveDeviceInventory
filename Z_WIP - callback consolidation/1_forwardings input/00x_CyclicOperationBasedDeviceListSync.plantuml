@startuml 00x_CyclicOperationBasedDeviceListSync
skinparam responseMessageBelowArrow true

title
PromptForEmbeddingCausesCyclicLoadingOfDeviceListFromController
PromptForEmbeddingCausesCyclicLoadingOfDeviceListFromCache
PromptForEmbeddingCausesUpdateOfDeviceListInCache
PromptForEmbeddingCausesDeletingExpiredDevicesFromCache
PromptForEmbeddingCausesRetrievingNextSlidingWindowCandidateDeviceFromDeviceList
PromptForEmbeddingCausesSelfCallingForLoadingOfControlConstructForCyclicUpdate
PromptForEmbeddingCausesCyclicLoadingOfDeviceTypeInfo
end title

participant "RO" as ro
participant "MWDI://v1/embed-yourself" as mwdi
participant "ODL://{controllerInternalPathToMountPoint}?fields=\nnode(node-id;netconf-node-topology:\nconnection-status;schema-cache-directory)" as odlConnectionStatus
participant "ElasticSearch\n(deviceMetadataList)" as deviceList
participant "MWDI://core-model-1-4:network-control-domain=live/\ncontrol-construct={mountName}" as ControlConstruct
participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}\n?fields=logical-termination-point(layer-protocol(air-interface-2-0:air-interface-pac\n(air-interface-capability(type-of-equipment))))" as mwdiDevType



ro -> mwdi
activate mwdi

note over mwdi
Cyclic operation for 
internal deviceMetadataList and
cache update starts
end note

== Get and compare deviceLists ==

'get deviceList from Controller
note over mwdi
  <u>GetDeviceListFromController</u>
end note
mwdi -> odlConnectionStatus
odlConnectionStatus --> mwdi: {list of-(mount-name, connection-status, schema-cache-directory)}

'get MWDI deviceMetadataList from ElasticSearch
note over mwdi
  <u>GetMwdiDeviceList</u>
end note
mwdi -> deviceList
deviceList --> mwdi: {list of-(mount-name, connection-status)}

== Update deviceMetadataList, apply CC deletion policy for disconnected devices ==

note over mwdi
  <u>UpdateMwdiDeviceList</u>
end note
mwdi -> deviceList: (a) add {mountName}, initialize metadata \n(b) update metadata for {mountName}, \n(c) delete expired {mountName}

note over mwdi
  <u>DeleteExpiredCcsFromCache</u>
end note
mwdi -> deviceList: delete {mountName}

== Cycically find next update candidate for slidingWindow and update cache == 

note over mwdi
  <u>GetNextUpdateCandidateForSlidingWindow</u>
end note
mwdi -> deviceList
deviceList --> mwdi: <i>next retrieval candidate</i>: {mount-name}

note over mwdi
  <u>SlidingWindowCcUpdate</u>
end note
mwdi -> ControlConstruct: {mountName} (apiKeyAuth)

== Update the deviceType == 

note over mwdi
  <u>GetDeviceTypeFromCC</u>
end note
mwdi -> mwdiDevType: {mount-name}
mwdiDevType -> mwdi: {filtered CC data}
mwdi -> deviceList: {mount-name, mapped-device-type}

deactivate mwdi

@enduml
@startuml 01x_NotificationPollingFromKafkaAndProcessing
skinparam responseMessageBelowArrow true

title 
PromptForEmbeddingCausesSubscribingForNotificationsAtKafka
PromptForEmbeddingCausesCylicPollingOfProperNotificationsFromKafka
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyControllerAttributeValueChange
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceAlarmChange
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceAttributeValueChange
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceObjectCreation
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceObjectDeletion
end title

participant "RO" as ro
participant "MWDI://v1/embed-yourself" as mwdi
participant "KafkaMessageBroker: \nproperNotifications topic" as kafka
participant "call \n<i>MWDI://v1/regard-controller-attribute-value-change </i>\nvia javascript interface" as regardCtrlAttChange
participant "call \n<i>MWDI://v1/regard-device-alarm </i>\nvia javascript interface" as regardAlarm
participant "call \n<i>MWDI://v1/regard-device-attribute-value-change </i>\nvia javascript interface" as regardDevAttChange
participant "call \n<i>MWDI://v1/regard-device-object-creation </i>\nvia javascript interface" as regardDevObjCreation
participant "call \n<i>MWDI://v1/regard-device-object-deletion </i>\nvia javascript interface" as regardDevObjDeletion

ro -> mwdi
activate mwdi


== subscribe at Kafka ==
note over mwdi
<u>SubscribeForProperNotifications</u>
  subscribe at Kafka topic with
  topicName=proper_notifications
end note
mwdi -> kafka: {topicName, brokerId, groupId, clientId} (apiKeyAuth)

== cycically poll new notifications and process them ==
note over mwdi
<u>ProperNotificationPolling</u>
  Cycically poll all new proper notifications from Kafka.
  Time interval according to <i>notificationPollingInterval</i>
  profileInstance.
  As the MWDI (consumer) repeats polling cycically,
  it will not wait for new notifications at Kafka, before
  polling is completed.
end note
mwdi -> kafka: {pollWaitingTime=0}
kafka -> mwdi: {consumerRecords = list-of(partition, offset, properNotification)}

note over mwdi
<u>IdentifyAndProcessProperNotifications</u>
  For each properNotification in the consumerRecords,
  identify the notification type and 
  call the respective notification processing
  functionality via javascript interface.

  (Functionality can be seen from <i>regard</i>-services,
  but shall be executed completely via javascript interface, without
  calling the actual <i>regard</i>-services to prevent
  new http sessions to be opened for each notification.)
end note
mwdi -> regardCtrlAttChange: {controller-attribute-value-change-notification}
mwdi -> regardAlarm: {device-alarm-notification}
mwdi -> regardDevAttChange: {device-attribute-value-change-notification}
mwdi -> regardDevObjCreation: {device-object-creation-notification}
mwdi -> regardDevObjDeletion: {device-object-deletion-notification}

deactivate mwdi

@enduml
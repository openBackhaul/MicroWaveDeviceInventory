@startuml 01x_NotificationPollingFromKafkaAndProcessing
skinparam responseMessageBelowArrow true

title 
PromptForEmbeddingCausesSubscribingForDeviceChangeNotificationsAtKafka
PromptForEmbeddingCausesSubscribingForDeviceAlarmNotificationsAtKafka
PromptForEmbeddingCausesCylicPollingOfDeviceChangeNotificationsFromKafka
PromptForEmbeddingCausesCylicPollingOfDeviceAlarmNotificationsFromKafka
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyControllerAttributeValueChange
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceAlarmChange
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceAttributeValueChange
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceObjectCreation
PromptForEmbeddingCausesCyclicNotificationProcessingToApplyDeviceObjectDeletion
end title

participant "RO" as ro
participant "MWDI://v1/embed-yourself" as mwdi
participant "KafkaMessageBroker: \nyi>deviceChangeNotifications</i> topic" as kafkaDev
participant "KafkaMessageBroker: \n<i>deviceAlarmNotifications</i> topic" as kafkaAlarm
participant "call \n<i>MWDI://v1/regard-controller-attribute-value-change </i>\nvia javascript interface" as regardCtrlAttChange
participant "call \n<i>MWDI://v1/regard-device-alarm </i>\nvia javascript interface" as regardAlarm
participant "call \n<i>MWDI://v1/regard-device-attribute-value-change </i>\nvia javascript interface" as regardDevAttChange
participant "call \n<i>MWDI://v1/regard-device-object-creation </i>\nvia javascript interface" as regardDevObjCreation
participant "call \n<i>MWDI://v1/regard-device-object-deletion </i>\nvia javascript interface" as regardDevObjDeletion

ro -> mwdi
activate mwdi


== subscribe at Kafka ==
note over mwdi
<u>SubscribeForDeviceChangeNotifications</u>
  subscribe at Kafka topic with
  topicName=device_change_notifications
end note
mwdi -> kafkaDev: {topicName, brokerId, groupId, clientId} (apiKeyAuth)

note over mwdi
<u>SubscribeForDeviceAlarmNotifications</u>
  subscribe at Kafka topic with
  topicName=device_alarm_notifications
end note
mwdi -> kafkaAlarm: {topicName, brokerId, groupId, clientId} (apiKeyAuth)

== cycically poll new notifications and process them ==
note over mwdi
<u>deviceChangeNotificationPolling</u>
  Continuously poll all new device change notifications from Kafka.
  Time interval according to <i>notificationPollingInterval</i>
  profileInstance.
end note
mwdi -> kafkaDev: {pollWaitingTime=0}
kafkaDev -> mwdi: {consumerRecords = list-of(partition, offset, deviceChangeNotification)}

note over mwdi
<u>deviceAlarmNotificationPolling</u>
  Continuously poll all new device alarm notifications from Kafka.
end note
mwdi -> kafkaAlarm: {pollWaitingTime=0}
kafkaAlarm -> mwdi: {consumerRecords = list-of(partition, offset, deviceAlarmNotification)}

note over mwdi
<u>IdentifyAndProcessDeviceChangeAndAlarmNotifications</u>
  For each deviceChangeNotification in the consumerRecords,
  identify the notification type and 
  call the respective notification processing
  functionality via javascript interface.
  For each alarmChangeNotification call the alarm processing
  functionality via javascript interface.

  (Functionality can be seen from <i>regard</i>-services,
  but shall be executed completely via javascript interface, without
  calling the actual <i>regard</i>-services to prevent
  new http sessions to be opened for each notification.)
end note
mwdi -> regardDevAttChange: {device-attribute-value-change-notification}
mwdi -> regardDevObjCreation: {device-object-creation-notification}
mwdi -> regardDevObjDeletion: {device-object-deletion-notification}
mwdi -> regardAlarm: {device-alarm-notification}

deactivate mwdi

@enduml
{
	"info": {
		"_postman_id": "feb7a200-c08c-45a0-af27-eb26abac11d6",
		"name": "mwdi+testcase.completeness",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== mwdi+testcase.completeness ==========================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // uuid of the object that is to be validated\r",
									"    // localId of the object that is to be validated\r",
									"\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "AirInterface.Completeness",
					"item": [
						{
							"name": "ListOfLTPUuidAndLidPairsAndNames",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ListOfLTPUuidAndLidPairsAndNames ====================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"logical-termination-point(uuid;layer-protocol(local-id;layer-protocol-name))\";\r",
											"    filters = UrlEncodeString(filters);\r",
											"    filters = \"?fields=\" + filters;\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"\";\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if (mountName!=\"\") {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"=\", \"%3D\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"var serverToBeApplied;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    let collectionInfo;\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var uuidAndLocalId = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            let layerProtocolName;\r",
											"            layerProtocolName = \"air-interface-2-0:LAYER_PROTOCOL_NAME_TYPE_AIR_LAYER\";\r",
											"            uuidAndLocalId = FindUuidAndLocalIdForLtpType(responseObject, layerProtocolName, serverToBeApplied)\r",
											"\r",
											"        } else {\r",
											"            pm.test(\"List of LTPs could be loaded\", function () {\r",
											"                pm.expect(false).to.be.true\r",
											"            });\r",
											"            logger.log(\"FAIL: List of LTPs could not be loaded\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    logger.log(\"Analysis:\");\r",
											"    if ( (uri!=dummyUri) && (Object.keys(uuidAndLocalId).length==2) ) {\r",
											"        logger.log(\"  - UUID: \" + uuidAndLocalId.uuid);\r",
											"        logger.log(\"  - LocalId: \" + uuidAndLocalId.localId)\r",
											"    } else {\r",
											"        logger.log(\"  - No LTP of correct LayerProtocolName found.\")\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"uuidAndLocalId\", uuidAndLocalId);\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function FindUuidAndLocalIdForLtpType(responseObject, searchedLayerProtocolName, serverToBeApplied) {\r",
											"    if ( (serverToBeApplied==\"controller\") || (serverToBeApplied==\"controller in mwdi+simulator.completeness\") ) {\r",
											"        for(let i=0; i<responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"].length; i++) {\r",
											"            let layerProtocolName;\r",
											"            try {\r",
											"                layerProtocolName = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"layer-protocol-name\"]\r",
											"            } catch (error) {\r",
											"                layerProtocolName = \"\"\r",
											"            }\r",
											"            if( layerProtocolName == searchedLayerProtocolName ) {\r",
											"                let uuidAndLocalId = {};\r",
											"                uuidAndLocalId.uuid = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"][i][\"uuid\"];\r",
											"                uuidAndLocalId.localId = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"local-id\"];\r",
											"                return uuidAndLocalId\r",
											"            }\r",
											"        }\r",
											"        return \"\"\r",
											"\r",
											"    } else {\r",
											"        for(let i=0; i<responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"].length; i++) {\r",
											"            let layerProtocolName;\r",
											"            try {\r",
											"                layerProtocolName = responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"layer-protocol-name\"]\r",
											"            } catch (error) {\r",
											"                layerProtocolName = \"\"\r",
											"            }\r",
											"            if( layerProtocolName == searchedLayerProtocolName ) {\r",
											"                let uuidAndLocalId = {};\r",
											"                uuidAndLocalId.uuid = responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"][i][\"uuid\"];\r",
											"                uuidAndLocalId.localId = responseObject[\"core-model-1-4:control-construct\"][0][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"local-id\"];\r",
											"                return uuidAndLocalId\r",
											"            }\r",
											"        }\r",
											"        return \"\"\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "air-interface-capability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"air-interface-2-0:air-interface-capability\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"air-interface-2-0:air-interface-capability\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"type-of-equipment\",\r",
											"                    \"tx-frequency-min\",\r",
											"                    \"tx-frequency-max\",\r",
											"                    \"rx-frequency-min\",\r",
											"                    \"rx-frequency-max\",\r",
											"                    \"duplex-distance-is-freely-configurable\",\r",
											"                    \"transmission-mode-list\",\r",
											"                    \"auto-freq-select-is-avail\",\r",
											"                    \"receiver-on-off-is-avail\",\r",
											"                    \"adaptive-modulation-is-avail\",\r",
											"                    \"atpc-is-avail\",\r",
											"                    \"atpc-range\",\r",
											"                    \"supported-radio-signal-id-datatype\",\r",
											"                    \"supported-radio-signal-id-length\",\r",
											"                    \"expected-equals-transmitted-radio-signal-id\",\r",
											"                    \"encryption-is-avail\",\r",
											"                    \"supported-loop-back-kind-list\",\r",
											"                    \"maintenance-timer-range\",\r",
											"                    \"acm-threshold-cross-alarms-is-avail\",\r",
											"                    \"clearing-threshold-cross-alarms-is-avail\",\r",
											"                    \"performance-monitoring-is-avail\",\r",
											"                    \"direction-of-acm-performance-values\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"type-of-equipment\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tx-frequency-min\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"tx-frequency-max\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"rx-frequency-min\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"rx-frequency-max\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"duplex-distance-is-freely-configurable\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"duplex-distance-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"items\": {\r",
											"                            \"type\": \"integer\",\r",
											"                            \"format\": \"int32\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"transmission-mode-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"x-key\": \"transmission-mode-name\",\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"transmission-mode-name\",\r",
											"                                \"transmission-mode-rank\",\r",
											"                                \"channel-bandwidth\",\r",
											"                                \"modulation-scheme\",\r",
											"                                \"code-rate\",\r",
											"                                \"symbol-rate-reduction-factor\",\r",
											"                                \"tx-power-min\",\r",
											"                                \"tx-power-max\",\r",
											"                                \"rx-threshold\",\r",
											"                                \"am-upshift-level\",\r",
											"                                \"am-downshift-level\",\r",
											"                                \"xpic-is-avail\",\r",
											"                                \"supported-as-fixed-configuration\",\r",
											"                                \"modulation-scheme-name-at-lct\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"transmission-mode-name\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                },\r",
											"                                \"transmission-mode-rank\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"channel-bandwidth\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"modulation-scheme\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int16\"\r",
											"                                },\r",
											"                                \"code-rate\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"symbol-rate-reduction-factor\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"tx-power-min\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"tx-power-max\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"rx-threshold\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int16\"\r",
											"                                },\r",
											"                                \"am-upshift-level\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"am-downshift-level\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"xpic-is-avail\": {\r",
											"                                    \"type\": \"boolean\"\r",
											"                                },\r",
											"                                \"supported-as-fixed-configuration\": {\r",
											"                                    \"type\": \"boolean\"\r",
											"                                },\r",
											"                                \"modulation-scheme-name-at-lct\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"auto-freq-select-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"receiver-on-off-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"adaptive-modulation-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"atpc-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"atpc-range\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"supported-radio-signal-id-datatype\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",\r",
											"                            \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",\r",
											"                            \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\"\r",
											"                        ]\r",
											"                    },\r",
											"                    \"supported-radio-signal-id-length\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int16\"\r",
											"                    },\r",
											"                    \"expected-equals-transmitted-radio-signal-id\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"encryption-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"supported-loop-back-kind-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 1,\r",
											"                        \"maxItems\": 4,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"string\",\r",
											"                            \"enum\": [\r",
											"                                \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",\r",
											"                                \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",\r",
											"                                \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",\r",
											"                                \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",\r",
											"                                \"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\r",
											"                            ]\r",
											"                        }\r",
											"                    },\r",
											"                    \"maintenance-timer-range\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"acm-threshold-cross-alarms-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"clearing-threshold-cross-alarms-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"performance-monitoring-is-avail\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"direction-of-acm-performance-values\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"air-interface-2-0:DIRECTION_TYPE_TX\",\r",
											"                            \"air-interface-2-0:DIRECTION_TYPE_RX\",\r",
											"                            \"air-interface-2-0:DIRECTION_TYPE_NONE\"\r",
											"                        ]\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"AirInterfaceCapability could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: AirInterfaceCapability could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: AirInterfaceCapability could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== AirInterfaceCapability ==============================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let uuidAndLocalId = {};\r",
											"    uuidAndLocalId = pm.collectionVariables.get(\"uuidAndLocalId\");\r",
											"    if ( Object.keys(uuidAndLocalId).length == 2 ) {\r",
											"        uuid = uuidAndLocalId.uuid;\r",
											"        localId = uuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/logical-termination-point={uuid}/layer-protocol={localId}/air-interface-2-0:air-interface-pac/air-interface-capability\";\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"    resourcePath = FillLocalIdIntoPath(resourcePath, localId);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (uuid!=\"\") && (localId!=\"\") ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "air-interface-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"air-interface-2-0:air-interface-configuration\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"air-interface-2-0:air-interface-configuration\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"air-interface-name\",\r",
											"                    \"remote-air-interface-name\",\r",
											"                    \"transmitted-radio-signal-id\",\r",
											"                    \"expected-radio-signal-id\",\r",
											"                    \"tx-frequency\",\r",
											"                    \"rx-frequency\",\r",
											"                    \"duplex-distance\",\r",
											"                    \"transmission-mode-min\",\r",
											"                    \"transmission-mode-max\",\r",
											"                    \"power-is-on\",\r",
											"                    \"transmitter-is-on\",\r",
											"                    \"receiver-is-on\",\r",
											"                    \"tx-power\",\r",
											"                    \"adaptive-modulation-is-on\",\r",
											"                    \"xpic-is-on\",\r",
											"                    \"mimo-is-on\",\r",
											"                    \"alic-is-on\",\r",
											"                    \"atpc-is-on\",\r",
											"                    \"atpc-thresh-upper\",\r",
											"                    \"atpc-thresh-lower\",\r",
											"                    \"atpc-tx-power-min\",\r",
											"                    \"auto-freq-select-is-on\",\r",
											"                    \"auto-freq-select-range\",\r",
											"                    \"modulation-is-on\",\r",
											"                    \"encryption-is-on\",\r",
											"                    \"cryptographic-key\",\r",
											"                    \"loop-back-kind-on\",\r",
											"                    \"maintenance-timer\",\r",
											"                    \"performance-monitoring-is-on\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"air-interface-name\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"remote-air-interface-name\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"transmitted-radio-signal-id\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"numeric-radio-signal-id\",\r",
											"                            \"alphanumeric-radio-signal-id\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"numeric-radio-signal-id\": {\r",
											"                                \"type\": \"integer\",\r",
											"                                \"format\": \"int32\"\r",
											"                            },\r",
											"                            \"alphanumeric-radio-signal-id\": {\r",
											"                                \"type\": \"string\"\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"expected-radio-signal-id\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"numeric-radio-signal-id\",\r",
											"                            \"alphanumeric-radio-signal-id\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"numeric-radio-signal-id\": {\r",
											"                                \"type\": \"integer\",\r",
											"                                \"format\": \"int32\"\r",
											"                            },\r",
											"                            \"alphanumeric-radio-signal-id\": {\r",
											"                                \"type\": \"string\"\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"tx-frequency\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"rx-frequency\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"duplex-distance\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"transmission-mode-min\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"transmission-mode-max\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"power-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"transmitter-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"receiver-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"tx-power\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"adaptive-modulation-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"xpic-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"mimo-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"alic-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"atpc-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"atpc-thresh-upper\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int16\"\r",
											"                    },\r",
											"                    \"atpc-thresh-lower\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int16\"\r",
											"                    },\r",
											"                    \"atpc-tx-power-min\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"auto-freq-select-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"auto-freq-select-range\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"modulation-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"encryption-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"cryptographic-key\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"loop-back-kind-on\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\r",
											"                        ]\r",
											"                    },\r",
											"                    \"maintenance-timer\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"g-826-threshold-cross-alarm-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"x-key\": \"g-826-value-kind granularity-period\",\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"g-826-value-kind\",\r",
											"                                \"alarm-raising-threshold\",\r",
											"                                \"alarm-clearing-threshold\",\r",
											"                                \"granularity-period\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"g-826-value-kind\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:G_826_TYPE_ES\",\r",
											"                                        \"air-interface-2-0:G_826_TYPE_SES\",\r",
											"                                        \"air-interface-2-0:G_826_TYPE_CSES\",\r",
											"                                        \"air-interface-2-0:G_826_TYPE_UAS\",\r",
											"                                        \"air-interface-2-0:G_826_TYPE_NOT_SPECIFIED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"alarm-raising-threshold\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"alarm-clearing-threshold\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"granularity-period\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"xlts-threshold-cross-alarm-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"x-key\": \"level-threshold-second-kind granularity-period xlts-threshold-cross-alarm-definition-number\",\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"level-threshold-second-kind\",\r",
											"                                \"xlts-level\",\r",
											"                                \"amount-of-seconds\",\r",
											"                                \"granularity-period\",\r",
											"                                \"xlts-threshold-cross-alarm-definition-number\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"level-threshold-second-kind\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS\",\r",
											"                                        \"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS\",\r",
											"                                        \"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"xlts-level\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"amount-of-seconds\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"granularity-period\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"xlts-threshold-cross-alarm-definition-number\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"acm-threshold-cross-alarm-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"x-key\": \"acm-threshold-cross-alarm-definition-number granularity-period\",\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"acm-threshold-cross-alarm-definition-number\",\r",
											"                                \"transmission-mode\",\r",
											"                                \"seconds-for-raising-alarm\",\r",
											"                                \"seconds-for-clearing-alarm\",\r",
											"                                \"granularity-period\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"acm-threshold-cross-alarm-definition-number\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int8\"\r",
											"                                },\r",
											"                                \"transmission-mode\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                },\r",
											"                                \"seconds-for-raising-alarm\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"seconds-for-clearing-alarm\": {\r",
											"                                    \"type\": \"integer\",\r",
											"                                    \"format\": \"int32\"\r",
											"                                },\r",
											"                                \"granularity-period\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"performance-monitoring-is-on\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"AirInterfaceConfiguration could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: AirInterfaceConfiguration could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: AirInterfaceConfiguration could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== AirInterfaceConfiguration ===========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let uuidAndLocalId = {};\r",
											"    uuidAndLocalId = pm.collectionVariables.get(\"uuidAndLocalId\");\r",
											"    if ( Object.keys(uuidAndLocalId).length == 2 ) {\r",
											"        uuid = uuidAndLocalId.uuid;\r",
											"        localId = uuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/logical-termination-point={uuid}/layer-protocol={localId}/air-interface-2-0:air-interface-pac/air-interface-configuration\";\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"    resourcePath = FillLocalIdIntoPath(resourcePath, localId);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (uuid!=\"\") && (localId!=\"\") ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "air-interface-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"air-interface-2-0:air-interface-status\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"air-interface-2-0:air-interface-status\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"interface-status\",\r",
											"                    \"tx-frequency-cur\",\r",
											"                    \"rx-frequency-cur\",\r",
											"                    \"transmission-mode-cur\",\r",
											"                    \"received-radio-signal-id\",\r",
											"                    \"link-is-up\",\r",
											"                    \"xpic-is-up\",\r",
											"                    \"mimo-is-up\",\r",
											"                    \"alic-is-up\",\r",
											"                    \"atpc-is-up\",\r",
											"                    \"auto-freq-select-is-up\",\r",
											"                    \"local-end-point-id\",\r",
											"                    \"remote-end-point-id\",\r",
											"                    \"loop-back-kind-up\",\r",
											"                    \"performance-monitoring-is-up\",\r",
											"                    \"rx-level-cur\",\r",
											"                    \"tx-level-cur\",\r",
											"                    \"snir-cur\",\r",
											"                    \"xpd-cur\",\r",
											"                    \"rf-temp-cur\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"interface-status\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",\r",
											"                            \"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"\r",
											"                        ]\r",
											"                    },\r",
											"                    \"tx-frequency-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"rx-frequency-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int32\"\r",
											"                    },\r",
											"                    \"transmission-mode-cur\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"received-radio-signal-id\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\r",
											"                            \"numeric-radio-signal-id\",\r",
											"                            \"alphanumeric-radio-signal-id\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"numeric-radio-signal-id\": {\r",
											"                                \"type\": \"integer\",\r",
											"                                \"format\": \"int32\"\r",
											"                            },\r",
											"                            \"alphanumeric-radio-signal-id\": {\r",
											"                                \"type\": \"string\"\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"link-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"xpic-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"mimo-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"alic-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"atpc-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"auto-freq-select-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"local-end-point-id\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"remote-end-point-id\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"loop-back-kind-up\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"enum\": [\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",\r",
											"                            \"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\r",
											"                        ]\r",
											"                    },\r",
											"                    \"performance-monitoring-is-up\": {\r",
											"                        \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"rx-level-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"tx-level-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"snir-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"xpd-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"rf-temp-cur\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"AirInterfaceStatus could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: AirInterfaceStatus could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: AirInterfaceStatus could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== AirInterfaceStatus ==================================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let uuidAndLocalId = {};\r",
											"    uuidAndLocalId = pm.collectionVariables.get(\"uuidAndLocalId\");\r",
											"    if ( Object.keys(uuidAndLocalId).length == 2 ) {\r",
											"        uuid = uuidAndLocalId.uuid;\r",
											"        localId = uuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/logical-termination-point={uuid}/layer-protocol={localId}/air-interface-2-0:air-interface-pac/air-interface-status\";\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"    resourcePath = FillLocalIdIntoPath(resourcePath, localId);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (uuid!=\"\") && (localId!=\"\") ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "air-interface-current-performance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"air-interface-2-0:air-interface-current-performance\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"air-interface-2-0:air-interface-current-performance\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"number-of-current-performance-sets\",\r",
											"                    \"current-performance-data-list\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"number-of-current-performance-sets\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int8\"\r",
											"                    },\r",
											"                    \"current-performance-data-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"minItems\": 1,\r",
											"                        \"maxItems\": 2,\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"timestamp\",\r",
											"                                \"suspect-interval-flag\",\r",
											"                                \"elapsed-time\",\r",
											"                                \"scanner-id\",\r",
											"                                \"granularity-period\",\r",
											"                                \"performance-data\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"timestamp\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(Z|[\\\\+\\\\-]\\\\d{2}:\\\\d{2})$\"\r",
											"                                },\r",
											"                                \"suspect-interval-flag\": {\r",
											"                                    \"type\": \"boolean\"\r",
											"                                },\r",
											"                                \"elapsed-time\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                },\r",
											"                                \"scanner-id\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                },\r",
											"                                \"granularity-period\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"performance-data\": {\r",
											"                                    \"type\": \"object\",\r",
											"                                    \"required\": [\r",
											"                                        \"es\",\r",
											"                                        \"ses\",\r",
											"                                        \"cses\",\r",
											"                                        \"unavailability\",\r",
											"                                        \"tx-level-min\",\r",
											"                                        \"tx-level-max\",\r",
											"                                        \"tx-level-avg\",\r",
											"                                        \"rx-level-min\",\r",
											"                                        \"rx-level-max\",\r",
											"                                        \"rx-level-avg\",\r",
											"                                        \"time-xstates-list\",\r",
											"                                        \"snir-min\",\r",
											"                                        \"snir-max\",\r",
											"                                        \"snir-avg\",\r",
											"                                        \"xpd-min\",\r",
											"                                        \"xpd-max\",\r",
											"                                        \"xpd-avg\",\r",
											"                                        \"rf-temp-min\",\r",
											"                                        \"rf-temp-max\",\r",
											"                                        \"rf-temp-avg\",\r",
											"                                        \"defect-blocks-sum\",\r",
											"                                        \"time-period\"\r",
											"                                    ],\r",
											"                                    \"properties\": {\r",
											"                                        \"es\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"ses\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"cses\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"unavailability\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"tx-level-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"tx-level-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"tx-level-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rx-level-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rx-level-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rx-level-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"time-xstates-list\": {\r",
											"                                            \"type\": \"array\",\r",
											"                                            \"minItems\": 1,\r",
											"                                            \"x-key\": \"time-xstate-sequence-number\",\r",
											"                                            \"items\": {\r",
											"                                                \"type\": \"object\",\r",
											"                                                \"required\": [\r",
											"                                                    \"time-xstate-sequence-number\",\r",
											"                                                    \"transmission-mode\",\r",
											"                                                    \"time\"\r",
											"                                                ],\r",
											"                                                \"properties\": {\r",
											"                                                    \"time-xstate-sequence-number\": {\r",
											"                                                        \"type\": \"integer\",\r",
											"                                                        \"format\": \"int8\"\r",
											"                                                    },\r",
											"                                                    \"transmission-mode\": {\r",
											"                                                        \"type\": \"string\"\r",
											"                                                    },\r",
											"                                                    \"time\": {\r",
											"                                                        \"type\": \"integer\",\r",
											"                                                        \"format\": \"int32\"\r",
											"                                                    }\r",
											"                                                }\r",
											"                                            }\r",
											"                                        },\r",
											"                                        \"snir-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"snir-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"snir-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"xpd-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"xpd-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"xpd-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rf-temp-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rf-temp-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rf-temp-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"defect-blocks-sum\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int16\"\r",
											"                                        },\r",
											"                                        \"time-period\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        }\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"AirInterfaceCurrentPerformance could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: AirInterfaceCurrentPerformance could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: AirInterfaceCurrentPerformance could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== AirInterfaceCurrentPerformance ======================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let uuidAndLocalId = {};\r",
											"    uuidAndLocalId = pm.collectionVariables.get(\"uuidAndLocalId\");\r",
											"    if ( Object.keys(uuidAndLocalId).length == 2 ) {\r",
											"        uuid = uuidAndLocalId.uuid;\r",
											"        localId = uuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/logical-termination-point={uuid}/layer-protocol={localId}/air-interface-2-0:air-interface-pac/air-interface-current-performance\";\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"    resourcePath = FillLocalIdIntoPath(resourcePath, localId);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (uuid!=\"\") && (localId!=\"\") ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "air-interface-historical-performances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if ( Math.floor(responseCode/100) === 2 ) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"air-interface-2-0:air-interface-historical-performances\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"air-interface-2-0:air-interface-historical-performances\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"number-of-historical-performance-sets\",\r",
											"                    \"time-of-latest-change\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"number-of-historical-performance-sets\": {\r",
											"                        \"type\": \"integer\",\r",
											"                        \"format\": \"int16\"\r",
											"                    },\r",
											"                    \"time-of-latest-change\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(Z|[\\\\+\\\\-]\\\\d{2}:\\\\d{2})$\"\r",
											"                    },\r",
											"                    \"historical-performance-data-list\": {\r",
											"                        \"type\": \"array\",\r",
											"                        \"x-key\": \"granularity-period period-end-time\",\r",
											"                        \"items\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"suspect-interval-flag\",\r",
											"                                \"history-data-id\",\r",
											"                                \"granularity-period\",\r",
											"                                \"period-end-time\",\r",
											"                                \"performance-data\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"suspect-interval-flag\": {\r",
											"                                    \"type\": \"boolean\"\r",
											"                                },\r",
											"                                \"history-data-id\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                },\r",
											"                                \"granularity-period\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"enum\": [\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",\r",
											"                                        \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\r",
											"                                    ]\r",
											"                                },\r",
											"                                \"period-end-time\": {\r",
											"                                    \"type\": \"string\",\r",
											"                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(Z|[\\\\+\\\\-]\\\\d{2}:\\\\d{2})$\"\r",
											"                                },\r",
											"                                \"performance-data\": {\r",
											"                                    \"type\": \"object\",\r",
											"                                    \"required\": [\r",
											"                                        \"es\",\r",
											"                                        \"ses\",\r",
											"                                        \"cses\",\r",
											"                                        \"unavailability\",\r",
											"                                        \"tx-level-min\",\r",
											"                                        \"tx-level-max\",\r",
											"                                        \"tx-level-avg\",\r",
											"                                        \"rx-level-min\",\r",
											"                                        \"rx-level-max\",\r",
											"                                        \"rx-level-avg\",\r",
											"                                        \"time-xstates-list\",\r",
											"                                        \"snir-min\",\r",
											"                                        \"snir-max\",\r",
											"                                        \"snir-avg\",\r",
											"                                        \"xpd-min\",\r",
											"                                        \"xpd-max\",\r",
											"                                        \"xpd-avg\",\r",
											"                                        \"rf-temp-min\",\r",
											"                                        \"rf-temp-max\",\r",
											"                                        \"rf-temp-avg\",\r",
											"                                        \"defect-blocks-sum\",\r",
											"                                        \"time-period\"\r",
											"                                    ],\r",
											"                                    \"properties\": {\r",
											"                                        \"es\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"ses\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"cses\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"unavailability\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        },\r",
											"                                        \"tx-level-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"tx-level-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"tx-level-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rx-level-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rx-level-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rx-level-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"time-xstates-list\": {\r",
											"                                            \"type\": \"array\",\r",
											"                                            \"x-key\": \"time-xstate-sequence-number\",\r",
											"                                            \"items\": {\r",
											"                                                \"type\": \"object\",\r",
											"                                                \"required\": [\r",
											"                                                    \"time-xstate-sequence-number\",\r",
											"                                                    \"transmission-mode\",\r",
											"                                                    \"time\"\r",
											"                                                ],\r",
											"                                                \"properties\": {\r",
											"                                                    \"time-xstate-sequence-number\": {\r",
											"                                                        \"type\": \"integer\",\r",
											"                                                        \"format\": \"int8\"\r",
											"                                                    },\r",
											"                                                    \"transmission-mode\": {\r",
											"                                                        \"type\": \"string\"\r",
											"                                                    },\r",
											"                                                    \"time\": {\r",
											"                                                        \"type\": \"integer\",\r",
											"                                                        \"format\": \"int32\"\r",
											"                                                    }\r",
											"                                                }\r",
											"                                            }\r",
											"                                        },\r",
											"                                        \"snir-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"snir-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"snir-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"xpd-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"xpd-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"xpd-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rf-temp-min\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rf-temp-max\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"rf-temp-avg\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int8\"\r",
											"                                        },\r",
											"                                        \"defect-blocks-sum\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int16\"\r",
											"                                        },\r",
											"                                        \"time-period\": {\r",
											"                                            \"type\": \"integer\",\r",
											"                                            \"format\": \"int32\"\r",
											"                                        }\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"AirInterfaceHistoricalPerformances could be loaded\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if ( responseCode == 200 ) {\r",
											"            logger.log(\"  - ok: AirInterfaceHistoricalPerformances could be loaded\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: AirInterfaceHistoricalPerformances could not be loaded \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if ( Object.keys(responseObject).length != 0 ) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length==0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== AirInterfaceHistoricalPerformances ==================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterface\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let uuidAndLocalId = {};\r",
											"    uuidAndLocalId = pm.collectionVariables.get(\"uuidAndLocalId\");\r",
											"    if ( Object.keys(uuidAndLocalId).length == 2 ) {\r",
											"        uuid = uuidAndLocalId.uuid;\r",
											"        localId = uuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let filters;\r",
											"    filters = \"\";\r",
											"\r",
											"    let resourcePath;\r",
											"    resourcePath = \"/logical-termination-point={uuid}/layer-protocol={localId}/air-interface-2-0:air-interface-pac/air-interface-historical-performances\";\r",
											"    resourcePath = FillUuidIntoPath(resourcePath, uuid);\r",
											"    resourcePath = FillLocalIdIntoPath(resourcePath, localId);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (uuid!=\"\") && (localId!=\"\") ) {\r",
											"        uri = server + pathToControlConstruct + resourcePath + filters\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "clear-threshold-cross-alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code)\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    if ( uri != dummyUri ) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"ClearThresholdCrossAlarms RPC responded 204\", function () {\r",
											"            pm.expect(responseCode).to.equal(204)\r",
											"        });\r",
											"        if ( responseCode == 204 ) {\r",
											"            logger.log(\"  - ok: ClearThresholdCrossAlarms RPC responded 204\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: ClearThresholdCrossAlarms RPC responded \" + responseCode + \" instead of 204\")\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== ClearThresholdCrossAlarms ===========================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var collectionInfo = {};\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"var uuid = \"\";\r",
											"var localId = \"\";\r",
											"try {\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"AirInterfaceRpc\");\r",
											"\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"    let uuidAndLocalId = {};\r",
											"    uuidAndLocalId = pm.collectionVariables.get(\"uuidAndLocalId\");\r",
											"    if ( Object.keys(uuidAndLocalId).length == 2 ) {\r",
											"        uuid = uuidAndLocalId.uuid;\r",
											"        localId = uuidAndLocalId.localId\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let remoteProcedure;\r",
											"    remoteProcedure = \"/air-interface-2-0:clear-threshold-cross-alarms\";\r",
											"    if(collectionInfo.suffixUrlEncodingIsRequired==true) remoteProcedure = UrlEncodeSuffix(remoteProcedure);\r",
											"\r",
											"    let pathToControlConstruct;\r",
											"    pathToControlConstruct = serverInfo.pathToControlConstruct;\r",
											"    let mountName;\r",
											"    mountName = collectionInfo.mountName;\r",
											"    pathToControlConstruct = FillMountNameIntoPath(pathToControlConstruct, mountName);\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") &&  (uuid!=\"\") && (uuid!=undefined) ) {\r",
											"        uri = server + pathToControlConstruct + remoteProcedure\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input\": { '\r",
											"        +           '\"affected-air-interface\": \"' + uuid + '\" '\r",
											"        +       '} '\r",
											"        +   '}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ReplaceSubstringByNewstringInInputstring(inputstring, substring, newstring) {\r",
											"    try {\r",
											"        let indexOfStartOfSubstring = inputstring.lastIndexOf(substring);\r",
											"        while ( indexOfStartOfSubstring != -1 ) {\r",
											"            let precedingSubString = inputstring.slice(0, indexOfStartOfSubstring);\r",
											"            let indexOfEndOfSubstring = indexOfStartOfSubstring + substring.length;\r",
											"            let subsequentSubString = inputstring.slice(indexOfEndOfSubstring);\r",
											"            inputstring = precedingSubString + newstring + subsequentSubString;\r",
											"\r",
											"            indexOfStartOfSubstring = inputstring.lastIndexOf(substring)\r",
											"        }\r",
											"    } catch (error) {\r",
											"        inputstring = \"-1\";\r",
											"        logger.error(\"! Substring could not be replaced by Newstring\")\r",
											"    }\r",
											"    return inputstring\r",
											"}\r",
											"\r",
											"function UrlEncodeString(text) {\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \"(\", \"%28\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \")\", \"%29\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \":\", \"%3A\");\r",
											"    text = ReplaceSubstringByNewstringInInputstring(text, \";\", \"%3B\");\r",
											"    return text\r",
											"}\r",
											"\r",
											"function UrlEncodeSuffix(remoteProcedure) {\r",
											"    var remoteProcedureWithUrlEncodedSuffix;\r",
											"    try {\r",
											"        let indexOfLastSlash = remoteProcedure.lastIndexOf(\"/\");\r",
											"        let suffix = remoteProcedure.slice(indexOfLastSlash);\r",
											"        let urlEncodedSuffix = UrlEncodeString(suffix);\r",
											"        if (urlEncodedSuffix==\"-1\") throw \"encoding failed\";\r",
											"        let trunkPath = remoteProcedure.slice(0, indexOfLastSlash);\r",
											"        remoteProcedureWithUrlEncodedSuffix = trunkPath + urlEncodedSuffix\r",
											"    } catch (error) {\r",
											"        remoteProcedureWithUrlEncodedSuffix = \"\";\r",
											"        logger.error(\"! Suffix of remote procedure could not be encoded\")\r",
											"    }\r",
											"    return remoteProcedureWithUrlEncodedSuffix\r",
											"}\r",
											"\r",
											"function FillUuidIntoPath(path, uuid) {\r",
											"    if ( (uuid!=undefined) && (uuid!=null) && (uuid!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{uuid}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + uuid + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillLocalIdIntoPath(path, localId) {\r",
											"    if ( (localId!=undefined) && (localId!=null) && (localId!=\"\") ) {\r",
											"      let subStringToBeReplaced = \"{localId}\";\r",
											"      let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"      let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"      let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"      let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"      path = precedingSubString + localId + subsequentSubString;\r",
											"      return path\r",
											"    } else {\r",
											"      return path\r",
											"    }\r",
											"}\r",
											"\r",
											"function FillMountNameIntoPath(path, mountName) {\r",
											"  let subStringToBeReplaced = \"{mountName}\";\r",
											"  let indexOfStartOfSubStringToBeReplaced = path.lastIndexOf(subStringToBeReplaced);\r",
											"  let precedingSubString = path.slice(0, indexOfStartOfSubStringToBeReplaced);\r",
											"  let indexOfEndOfSubStringToBeReplaced = indexOfStartOfSubStringToBeReplaced + subStringToBeReplaced.length;\r",
											"  let subsequentSubString = path.slice(indexOfEndOfSubStringToBeReplaced);\r",
											"  path = precedingSubString + mountName + subsequentSubString;\r",
											"  return path\r",
											"}\r",
											"\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    // no processing required\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be processed.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
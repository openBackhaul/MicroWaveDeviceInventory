{
	"info": {
		"name": "mwdi+testcase.invalidOrMissingRequestBody.subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== mwdi+testcase.invalidOrMissingRequestBody.subscriptions ==========================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // uuid of the object that is to be validated\r",
									"    // localId of the object that is to be validated\r",
									"    // linkId : linkName of the link that is to be validated\r",
									"    // linkPort : id of the linkPort that is to be validated\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Subscriptions.invalidOrMissingRequestBody",
					"item": [
						{
							"name": "/v1/notify-attribute-value-changes - requestBody invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"// returns 400, no responseBody to be checked\r",
											"var operationName = \"/v1/notify-attribute-value-changes\";\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(operationName + \" returned 400\", function () {\r",
											"            pm.expect(responseCode).to.equal(400)\r",
											"        });\r",
											"        if (responseCode == 400) {\r",
											"            logger.log(\"  - ok: \" + operationName + \" returned 400\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 400\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/notify-attribute-value-changes ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"invalidOrMissingRequestBody.subscriptions\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"var subscriberApplication = \"\";\r",
											"var subscriberReleaseNumber = \"\";\r",
											"var subscriberOperation = \"\";\r",
											"var subscriberProtocol = \"\";\r",
											"var subscriberIp = \"\";\r",
											"var subscriberPort = -1;\r",
											"\r",
											"\r",
											"try {\r",
											"\r",
											"    subscriberApplication = \"SomeSubscriberApp\";\r",
											"    subscriberReleaseNumber = \"1.0.0\";\r",
											"    subscriberOperation = \"/v1/regard-attribute-value-change\";\r",
											"    subscriberProtocol = \"HTTP\";\r",
											"    subscriberIp = \"1.1.1.1\";\r",
											"    subscriberPort = 9999;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/notify-attribute-value-changes\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri = server + servicePath;\r",
											"\r",
											"    let requestBody;\r",
											"    /*\r",
											"    requestBody = '{'\r",
											"        + '\"subscriber-application\" : ' + '\"' + subscriberApplication + '\",'\r",
											"        + '\"subscriber-release-number\" : ' + '\"' + subscriberReleaseNumber + '\",'\r",
											"        + '\"subscriber-operation\" : ' + '\"' + subscriberOperation + '\",' \r",
											"        + '\"subscriber-protocol\" : ' + '\"' + subscriberProtocol + '\",'\r",
											"        + '\"subscriber-address\" : {'  \r",
											"        + '  \"ip-address\": {'\r",
											"        + '    \"ipv-4-address\": '  + '\"' + subscriberIp + '\"'\r",
											"        + '   }' \r",
											"        + '},'\r",
											"        + '\"subscriber-port\" : ' +  subscriberPort\r",
											"    +'}';\r",
											"    */\r",
											"    //requestBody becomes invalid as soon as attributes are missing and/or schema structure is broken\r",
											"    requestBody = '{'\r",
											"       + '\"some-dummy-attribute\" : ' +  123 \r",
											"    +'}';  \r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/notify-object-creations - requestBody invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"// returns 400, no responseBody to be checked\r",
											"var operationName = \"/v1/notify-object-creations\";\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(operationName + \" returned 400\", function () {\r",
											"            pm.expect(responseCode).to.equal(400)\r",
											"        });\r",
											"        if (responseCode == 400) {\r",
											"            logger.log(\"  - ok: \" + operationName + \" returned 400\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 400\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/notify-object-creations ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"invalidOrMissingRequestBody.subscriptions\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"var subscriberApplication = \"\";\r",
											"var subscriberReleaseNumber = \"\";\r",
											"var subscriberOperation = \"\";\r",
											"var subscriberProtocol = \"\";\r",
											"var subscriberIp = \"\";\r",
											"var subscriberPort = -1;\r",
											"\r",
											"\r",
											"try {\r",
											"\r",
											"    subscriberApplication = \"SomeSubscriberApp\";\r",
											"    subscriberReleaseNumber = \"1.0.0\";\r",
											"    subscriberOperation = \"/v1/regard-object-creation\";\r",
											"    subscriberProtocol = \"HTTP\";\r",
											"    subscriberIp = \"1.1.1.1\";\r",
											"    subscriberPort = 9999;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/notify-object-creations\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri = server + servicePath;\r",
											"\r",
											"    let requestBody;\r",
											"    /*\r",
											"    requestBody = '{'\r",
											"        + '\"subscriber-application\" : ' + '\"' + subscriberApplication + '\",'\r",
											"        + '\"subscriber-release-number\" : ' + '\"' + subscriberReleaseNumber + '\",'\r",
											"        + '\"subscriber-operation\" : ' + '\"' + subscriberOperation + '\",' \r",
											"        + '\"subscriber-protocol\" : ' + '\"' + subscriberProtocol + '\",'\r",
											"        + '\"subscriber-address\" : {'  \r",
											"        + '  \"ip-address\": {'\r",
											"        + '    \"ipv-4-address\": '  + '\"' + subscriberIp + '\"'\r",
											"        + '   }' \r",
											"        + '},'\r",
											"        + '\"subscriber-port\" : ' +  subscriberPort\r",
											"    +'}';\r",
											"    */\r",
											"    //requestBody becomes invalid as soon as attributes are missing and/or schema structure is broken\r",
											"    requestBody = '{'\r",
											"       + '\"some-dummy-attribute\" : ' +  123 \r",
											"    +'}'; \r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/notify-object-deletions - requestBody invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"// returns 400, no responseBody to be checked\r",
											"var operationName = \"/v1/notify-object-deletions\";\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(operationName + \" returned 400\", function () {\r",
											"            pm.expect(responseCode).to.equal(400)\r",
											"        });\r",
											"        if (responseCode == 400) {\r",
											"            logger.log(\"  - ok: \" + operationName + \" returned 400\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 400\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/notify-object-deletions ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"invalidOrMissingRequestBody.subscriptions\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"var subscriberApplication = \"\";\r",
											"var subscriberReleaseNumber = \"\";\r",
											"var subscriberOperation = \"\";\r",
											"var subscriberProtocol = \"\";\r",
											"var subscriberIp = \"\";\r",
											"var subscriberPort = -1;\r",
											"\r",
											"\r",
											"try {\r",
											"\r",
											"    subscriberApplication = \"SomeSubscriberApp\";\r",
											"    subscriberReleaseNumber = \"1.0.0\";\r",
											"    subscriberOperation = \"/v1/regard-object-deletion\";\r",
											"    subscriberProtocol = \"HTTP\";\r",
											"    subscriberIp = \"1.1.1.1\";\r",
											"    subscriberPort = 9999;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/notify-object-deletions\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri = server + servicePath;\r",
											"\r",
											"    let requestBody;\r",
											"    /*\r",
											"    requestBody = '{'\r",
											"        + '\"subscriber-application\" : ' + '\"' + subscriberApplication + '\",'\r",
											"        + '\"subscriber-release-number\" : ' + '\"' + subscriberReleaseNumber + '\",'\r",
											"        + '\"subscriber-operation\" : ' + '\"' + subscriberOperation + '\",' \r",
											"        + '\"subscriber-protocol\" : ' + '\"' + subscriberProtocol + '\",'\r",
											"        + '\"subscriber-address\" : {'  \r",
											"        + '  \"ip-address\": {'\r",
											"        + '    \"ipv-4-address\": '  + '\"' + subscriberIp + '\"'\r",
											"        + '   }' \r",
											"        + '},'\r",
											"        + '\"subscriber-port\" : ' +  subscriberPort\r",
											"    +'}';\r",
											"    */\r",
											"    //requestBody becomes invalid as soon as attributes are missing and/or schema structure is broken\r",
											"    requestBody = '{'\r",
											"       + '\"some-dummy-attribute\" : ' +  123 \r",
											"    +'}'; \r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/notify-attribute-value-changes - requestBody missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"// returns 400, no responseBody to be checked\r",
											"var operationName = \"/v1/notify-attribute-value-changes\";\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(operationName + \" returned 400\", function () {\r",
											"            pm.expect(responseCode).to.equal(400)\r",
											"        });\r",
											"        if (responseCode == 400) {\r",
											"            logger.log(\"  - ok: \" + operationName + \" returned 400\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 400\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/notify-attribute-value-changes ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"invalidOrMissingRequestBody.subscriptions\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"var subscriberApplication = \"\";\r",
											"var subscriberReleaseNumber = \"\";\r",
											"var subscriberOperation = \"\";\r",
											"var subscriberProtocol = \"\";\r",
											"var subscriberIp = \"\";\r",
											"var subscriberPort = -1;\r",
											"\r",
											"\r",
											"try {\r",
											"\r",
											"    subscriberApplication = \"SomeSubscriberApp\";\r",
											"    subscriberReleaseNumber = \"1.0.0\";\r",
											"    subscriberOperation = \"/v1/regard-attribute-value-change\";\r",
											"    subscriberProtocol = \"HTTP\";\r",
											"    subscriberIp = \"1.1.1.1\";\r",
											"    subscriberPort = 9999;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/notify-attribute-value-changes\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri = server + servicePath;\r",
											"\r",
											"    let requestBody;\r",
											"    /*\r",
											"    requestBody = '{'\r",
											"        + '\"subscriber-application\" : ' + '\"' + subscriberApplication + '\",'\r",
											"        + '\"subscriber-release-number\" : ' + '\"' + subscriberReleaseNumber + '\",'\r",
											"        + '\"subscriber-operation\" : ' + '\"' + subscriberOperation + '\",' \r",
											"        + '\"subscriber-protocol\" : ' + '\"' + subscriberProtocol + '\",'\r",
											"        + '\"subscriber-address\" : {'  \r",
											"        + '  \"ip-address\": {'\r",
											"        + '    \"ipv-4-address\": '  + '\"' + subscriberIp + '\"'\r",
											"        + '   }' \r",
											"        + '},'\r",
											"        + '\"subscriber-port\" : ' +  subscriberPort\r",
											"    +'}';\r",
											"    */\r",
											"    //requestBody becomes invalid as soon as attributes are missing and/or schema structure is broken\r",
											"    requestBody = '{'\r",
											"       + '\"some-dummy-attribute\" : ' +  123 \r",
											"    +'}';  \r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/notify-object-deletions - requestBody missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"// returns 400, no responseBody to be checked\r",
											"var operationName = \"/v1/notify-object-deletions\";\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(operationName + \" returned 400\", function () {\r",
											"            pm.expect(responseCode).to.equal(400)\r",
											"        });\r",
											"        if (responseCode == 400) {\r",
											"            logger.log(\"  - ok: \" + operationName + \" returned 400\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 400\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/notify-object-deletions ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"invalidOrMissingRequestBody.subscriptions\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"var subscriberApplication = \"\";\r",
											"var subscriberReleaseNumber = \"\";\r",
											"var subscriberOperation = \"\";\r",
											"var subscriberProtocol = \"\";\r",
											"var subscriberIp = \"\";\r",
											"var subscriberPort = -1;\r",
											"\r",
											"\r",
											"try {\r",
											"\r",
											"    subscriberApplication = \"SomeSubscriberApp\";\r",
											"    subscriberReleaseNumber = \"1.0.0\";\r",
											"    subscriberOperation = \"/v1/regard-object-deletion\";\r",
											"    subscriberProtocol = \"HTTP\";\r",
											"    subscriberIp = \"1.1.1.1\";\r",
											"    subscriberPort = 9999;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/notify-object-deletions\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri = server + servicePath;\r",
											"\r",
											"    let requestBody;\r",
											"    /*\r",
											"    requestBody = '{'\r",
											"        + '\"subscriber-application\" : ' + '\"' + subscriberApplication + '\",'\r",
											"        + '\"subscriber-release-number\" : ' + '\"' + subscriberReleaseNumber + '\",'\r",
											"        + '\"subscriber-operation\" : ' + '\"' + subscriberOperation + '\",' \r",
											"        + '\"subscriber-protocol\" : ' + '\"' + subscriberProtocol + '\",'\r",
											"        + '\"subscriber-address\" : {'  \r",
											"        + '  \"ip-address\": {'\r",
											"        + '    \"ipv-4-address\": '  + '\"' + subscriberIp + '\"'\r",
											"        + '   }' \r",
											"        + '},'\r",
											"        + '\"subscriber-port\" : ' +  subscriberPort\r",
											"    +'}';\r",
											"    */\r",
											"    //requestBody becomes invalid as soon as attributes are missing and/or schema structure is broken\r",
											"    requestBody = '{'\r",
											"       + '\"some-dummy-attribute\" : ' +  123 \r",
											"    +'}'; \r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/notify-object-creations - requestBody missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"// returns 400, no responseBody to be checked\r",
											"var operationName = \"/v1/notify-object-creations\";\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(operationName + \" returned 400\", function () {\r",
											"            pm.expect(responseCode).to.equal(400)\r",
											"        });\r",
											"        if (responseCode == 400) {\r",
											"            logger.log(\"  - ok: \" + operationName + \" returned 400\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 400\")\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/notify-object-creations ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"invalidOrMissingRequestBody.subscriptions\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"var subscriberApplication = \"\";\r",
											"var subscriberReleaseNumber = \"\";\r",
											"var subscriberOperation = \"\";\r",
											"var subscriberProtocol = \"\";\r",
											"var subscriberIp = \"\";\r",
											"var subscriberPort = -1;\r",
											"\r",
											"\r",
											"try {\r",
											"\r",
											"    subscriberApplication = \"SomeSubscriberApp\";\r",
											"    subscriberReleaseNumber = \"1.0.0\";\r",
											"    subscriberOperation = \"/v1/regard-object-creation\";\r",
											"    subscriberProtocol = \"HTTP\";\r",
											"    subscriberIp = \"1.1.1.1\";\r",
											"    subscriberPort = 9999;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/notify-object-creations\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri = server + servicePath;\r",
											"\r",
											"    let requestBody;\r",
											"    /*\r",
											"    requestBody = '{'\r",
											"        + '\"subscriber-application\" : ' + '\"' + subscriberApplication + '\",'\r",
											"        + '\"subscriber-release-number\" : ' + '\"' + subscriberReleaseNumber + '\",'\r",
											"        + '\"subscriber-operation\" : ' + '\"' + subscriberOperation + '\",' \r",
											"        + '\"subscriber-protocol\" : ' + '\"' + subscriberProtocol + '\",'\r",
											"        + '\"subscriber-address\" : {'  \r",
											"        + '  \"ip-address\": {'\r",
											"        + '    \"ipv-4-address\": '  + '\"' + subscriberIp + '\"'\r",
											"        + '   }' \r",
											"        + '},'\r",
											"        + '\"subscriber-port\" : ' +  subscriberPort\r",
											"    +'}';\r",
											"    */\r",
											"    //requestBody becomes invalid as soon as attributes are missing and/or schema structure is broken\r",
											"    requestBody = '{'\r",
											"       + '\"some-dummy-attribute\" : ' +  123 \r",
											"    +'}'; \r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The requests for completness testing of subscriber services are executed with just dummy subscriber contact information provided in the requestBody."
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    // no processing required\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be processed.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
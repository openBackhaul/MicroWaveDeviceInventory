{
	"info": {
		"_postman_id": "cd03e137-0a7f-4be7-909b-0729c02a8186",
		"name": "MWDI_1.1.2+testcase.completeness_linkServices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9698906",
		"_collection_link": "https://kat123456.postman.co/workspace/Simulator-Testcase-Development~78954625-e639-4884-8c3a-7cc7df891995/collection/9698906-cd03e137-0a7f-4be7-909b-0729c02a8186?action=share&source=collection_link&creator=9698906"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== MWDI_1.1.2+testcase.completeness (link services) ===================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // linkId : Telefonica LinkID of an example microwave link\r",
									"    // kindOfReference : 'dynamic' for testing against implementations, 'static' for testing against simulators\r",
									"    // suffixUrlEncodingIsRequired : e.g. Mockoon requires the suffix being url encoded, but applications vice versa\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Completeness",
					"item": [
						{
							"name": "Ordinary services (200)",
							"item": [
								{
									"name": "/v1/provide-list-of-parallel-links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"        if (Math.floor(responseCode / 100) === 2) {\r",
													"            responseObject = JSON.parse(response.stream);\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"    \"type\": \"object\",\r",
													"    \"required\": [\r",
													"      \"parallel-link-list\"\r",
													"    ],\r",
													"    \"properties\": {\r",
													"      \"parallel-link-list\": {\r",
													"        \"type\": \"array\",\r",
													"        \"items\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      }\r",
													"    }\r",
													"  };\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(\"/v1/provide-list-of-parallel-links could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(200)\r",
													"        });\r",
													"        if (responseCode == 200) {\r",
													"            logger.log(\"  - ok: /v1/provide-list-of-parallel-links could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: /v1/provide-list-of-parallel-links provided \" + responseCode + \" instead of 200\")\r",
													"        }\r",
													"\r",
													"        if (Object.keys(responseObject).length != 0) {\r",
													"            logger.log(\"Reference Schema:\");\r",
													"            logger.log(reference);\r",
													"\r",
													"            logger.log(\"Interface Response:\");\r",
													"            logger.log(responseObject);\r",
													"\r",
													"            let validationResult;\r",
													"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"            logger.log(\"Validation Result:\");\r",
													"            logger.log(validationResult);\r",
													"\r",
													"            pm.test(\"Response matches schema definition\", function () {\r",
													"                pm.expect(validationResult.errors.length).to.equal(0)\r",
													"            });\r",
													"            if (validationResult.errors.length == 0) {\r",
													"                logger.log(\"  - ok: Response matches schema definition\")\r",
													"            } else {\r",
													"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
													"            }\r",
													"\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /v1/provide-list-of-parallel-links ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var linkId = \"\";\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.linkId;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/v1/provide-list-of-parallel-links\";\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri = server + servicePath;\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = ''\r",
													"        +   '{ '\r",
													"        +       '\"link-id\": \"' + linkId + '\"'\r",
													"        +   ' }';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Notes:\n\n- _/v1/provide-list-of-parallel-links_ retuns the list of parallel links for a given link\n    \n- the targeted link data is not written into the cache from device data, but must be added by a future application or manually in order to work.\n    \n- For this to return 200, put data via service _/core-model-1-4:network-control-domain=cache/link={uuid}_ before executing the test collection; setting this testing data is not included here."
						},
						{
							"name": "Link(port) services (200, 204)",
							"item": [
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}  - genericLink (204)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"// returns 204, so no responseBody to be checked\r",
													"var operationName = \"/core-model-1-4:network-control-domain=cache/link={uuid}\";\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(operationName + \" could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(204)\r",
													"        });\r",
													"        if (responseCode == 204) {\r",
													"            logger.log(\"  - ok: \" + operationName + \" could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 204\")\r",
													"        }\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid} ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.genericLink;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"var uuid = linkId;\r",
													"var layerProtocolName = \"layerProtocol_X\";\r",
													"var linkDirection = \"core-model-1-4:FORWARDING_DIRECTION_BIDIRECTIONAL\";\r",
													"var forwardingDomain = \"forwarding-domain-X\";\r",
													"var linkportLocalId = \"1\";\r",
													"var linkportDirection = \"core-model-1-4:PORT_DIRECTION_INPUT\";\r",
													"var linkportLtp = \"mountNameA+ltpA\";\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) ) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"        + '\"core-model-1-4:link\": ['\r",
													"            + '{'\r",
													"                + '\"uuid\" : ' + '\"' + uuid + '\",'\r",
													"                + '\"layer-protocol-name\" : ' + '\"' + layerProtocolName  + '\",'\r",
													"                + '\"link-direction\" : ' + '\"' + linkDirection + '\",'\r",
													"                + '\"forwarding-domain\": ['\r",
													"                    + '\"' + forwardingDomain + '\"'\r",
													"                + '],'\r",
													"                + '\"link-port\": ['\r",
													"                    + '{'\r",
													"                        + '\"local-id\": ' + '\"' + linkportLocalId + '\",'\r",
													"                        + '\"link-port-direction\": '+ '\"' + linkportDirection + '\",'\r",
													"                        + '\"logical-termination-point\": ' + '\"' + linkportLtp + '\"'\r",
													"                    + '}'\r",
													"                + ']'\r",
													"            + '}'\r",
													"        + ']'\r",
													"    +'}';\r",
													"\r",
													"/*\r",
													"{\r",
													"  \"core-model-1-4:link\": [\r",
													"    {\r",
													"      \"uuid\": \"genericLink1\",\r",
													"      \"layer-protocol-name\": \"layerProtocol_X\",\r",
													"      \"link-direction\": \"core-model-1-4:FORWARDING_DIRECTION_BIDIRECTIONAL\",\r",
													"      \"forwarding-domain\": [\r",
													"        \"forwarding-domain-X\"\r",
													"      ],\r",
													"      \"link-port\": [\r",
													"        {\r",
													"          \"local-id\": \"1\",\r",
													"          \"link-port-direction\": \"core-model-1-4:PORT_DIRECTION_INPUT\",\r",
													"          \"logical-termination-point\": \"mountnameA+ltpA\"\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"}\r",
													"*/\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}  - mfrLink (204)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"// returns 204, so no responseBody to be checked\r",
													"var operationName = \"/core-model-1-4:network-control-domain=cache/link={uuid}\";\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(operationName + \" could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(204)\r",
													"        });\r",
													"        if (responseCode == 204) {\r",
													"            logger.log(\"  - ok: \" + operationName + \" could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 204\")\r",
													"        }\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid} ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.mfrLink;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"var uuid = linkId;\r",
													"var layerProtocolName = \"core-model-1-4:LAYER_PROTOCOL_NAME_TYPE_AIR_LAYER\";\r",
													"var ep_cc = \"100250001\";\r",
													"var ep_ltp = \"10025001+LTP-MWPS-TTP-RADIO-2A\";\r",
													"var ep_lp = \"100250001+LP-MWPS-TTP-RADIO-2A\";\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) ) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"        + '\"core-model-1-4:link\": ['\r",
													"            + '{'\r",
													"                + '\"uuid\" : ' + '\"' + uuid + '\",'\r",
													"                + '\"layer-protocol-name\" : ' + '\"' + layerProtocolName  + '\",'\r",
													"                + '\"end-point-list\": ['\r",
													"                    + '{'\r",
													"                        + '\"control-construct\": ' + '\"'+ ep_cc + '\",'\r",
													"                        + '\"logical-termination-point\": ' + '\"' + ep_ltp + '\",'\r",
													"                        + '\"layer-protocol\": ' + '\"' + ep_lp + '\"'\r",
													"                    + '}'\r",
													"                + ']'\r",
													"            + '}'\r",
													"        + ']'\r",
													"    +'}';\r",
													"\r",
													"    /*\r",
													"    {\r",
													"    \"core-model-1-4:link\": [\r",
													"        {\r",
													"        \"uuid\": \"mfrLink1\",\r",
													"        \"layer-protocol-name\": \"core-model-1-4:LAYER_PROTOCOL_NAME_TYPE_AIR_LAYER\",\r",
													"        \"end-point-list\": [\r",
													"            {\r",
													"            \"control-construct\": \"100250001\",\r",
													"            \"logical-termination-point\": \"10025001+LTP-MWPS-TTP-RADIO-2A\",\r",
													"            \"layer-protocol\": \"100250001+LP-MWPS-TTP-RADIO-2A\"\r",
													"            }\r",
													"        ]\r",
													"        }\r",
													"    ]\r",
													"    }\r",
													"    */\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} (genericLink only) (204)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"// returns 204, so no responseBody to be checked\r",
													"var operationName = \"/core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId}\";\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(operationName + \" could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(204)\r",
													"        });\r",
													"        if (responseCode == 204) {\r",
													"            logger.log(\"  - ok: \" + operationName + \" could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 204\")\r",
													"        }\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} ================================================\");\r",
													"\r",
													"\r",
													"// the linkPort is only part of the genericLink schema\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var linkPort;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.genericLink;\r",
													"    linkPort = collectionInfo.linkPort\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkportLocalId = \"1\";\r",
													"var linkportDirection = \"core-model-1-4:PORT_DIRECTION_INPUT\";\r",
													"var linkportLtp = \"mountNameA+ltpA\";\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId + \"/link-port=\" + linkPort;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) && (linkPort!=\"\") && (linkPort!=undefined)) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"        + '\"core-model-1-4:link-port\": ['\r",
													"            + '{'\r",
													"                + '\"local-id\": ' + '\"' + linkportLocalId + '\",'\r",
													"                + '\"link-port-direction\": ' + '\"' + linkportDirection + '\",'\r",
													"                + '\"logical-termination-point\": ' + '\"' + linkportLtp + '\"'\r",
													"            + '}'\r",
													"        + ']'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}  - genericLink (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"        if (Math.floor(responseCode / 100) === 2) {\r",
													"            responseObject = JSON.parse(response.stream);\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"core-model-1-4:link\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": {\r",
													"            \"oneOf\": [\r",
													"              {\r",
													"                \"description\": \"generic\",\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\r",
													"                  \"uuid\",\r",
													"                  \"layer-protocol-name\",\r",
													"                  \"link-direction\",\r",
													"                  \"forwarding-domain\",\r",
													"                  \"link-port\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"uuid\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"layer-protocol-name\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"link-direction\": {\r",
													"                    \"type\": \"string\",\r",
													"                    \"enum\": [\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_BIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_UNIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_OMNIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_UNDEFINED_OR_UNKNOWN\"\r",
													"                    ]\r",
													"                  },\r",
													"                  \"forwarding-domain\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                      \"type\": \"string\"\r",
													"                    }\r",
													"                  },\r",
													"                  \"link-port\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                      \"oneOf\": [\r",
													"                        {\r",
													"                          \"description\": \"generic\",\r",
													"                          \"type\": \"object\",\r",
													"                          \"required\": [\r",
													"                            \"local-id\",\r",
													"                            \"link-port-direction\",\r",
													"                            \"logical-termination-point\"\r",
													"                          ],\r",
													"                          \"properties\": {\r",
													"                            \"local-id\": {\r",
													"                              \"type\": \"string\"\r",
													"                            },\r",
													"                            \"link-port-direction\": {\r",
													"                              \"type\": \"string\",\r",
													"                              \"enum\": [\r",
													"                                \"core-model-1-4:PORT_DIRECTION_INPUT\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_OUTPUT\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_BIDIRECTIONAL\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_OMNIDIRECTIONAL\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_UNIDENTIFIED_OR_UNKNOWN\"\r",
													"                              ]\r",
													"                            },\r",
													"                            \"logical-termination-point\": {\r",
													"                              \"type\": \"string\"\r",
													"                            }\r",
													"                          }\r",
													"                        }\r",
													"                      ]\r",
													"                    }\r",
													"                  }\r",
													"                }\r",
													"              },\r",
													"              {\r",
													"                \"description\": \"minimum for rest\",\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\r",
													"                  \"uuid\",\r",
													"                  \"layer-protocol-name\",\r",
													"                  \"end-point-list\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"uuid\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"layer-protocol-name\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"end-point-list\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                      \"type\": \"object\",\r",
													"                      \"required\": [\r",
													"                        \"control-construct\",\r",
													"                        \"logical-termination-point\",\r",
													"                        \"layer-protocol\"\r",
													"                      ],\r",
													"                      \"properties\": {\r",
													"                        \"control-construct\": {\r",
													"                          \"type\": \"string\"\r",
													"                        },\r",
													"                        \"logical-termination-point\": {\r",
													"                          \"type\": \"string\"\r",
													"                        },\r",
													"                        \"layer-protocol\": {\r",
													"                          \"type\": \"string\"\r",
													"                        }\r",
													"                      }\r",
													"                    }\r",
													"                  }\r",
													"                }\r",
													"              }\r",
													"            ]\r",
													"          }\r",
													"        }\r",
													"      }\r",
													"    };\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(\"/core-model-1-4:network-control-domain=cache/link={uuid} could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(200)\r",
													"        });\r",
													"        if (responseCode == 200) {\r",
													"            logger.log(\"  - ok: /core-model-1-4:network-control-domain=cache/link={uuid} could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: /core-model-1-4:network-control-domain=cache/link={uuid} provided \" + responseCode + \" instead of 200\")\r",
													"        }\r",
													"\r",
													"        if (Object.keys(responseObject).length != 0) {\r",
													"            logger.log(\"Reference Schema:\");\r",
													"            logger.log(reference);\r",
													"\r",
													"            logger.log(\"Interface Response:\");\r",
													"            logger.log(responseObject);\r",
													"\r",
													"            let validationResult;\r",
													"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"            logger.log(\"Validation Result:\");\r",
													"            logger.log(validationResult);\r",
													"\r",
													"            pm.test(\"Response matches schema definition\", function () {\r",
													"                pm.expect(validationResult.errors.length).to.equal(0)\r",
													"            });\r",
													"            if (validationResult.errors.length == 0) {\r",
													"                logger.log(\"  - ok: Response matches schema definition\")\r",
													"            } else {\r",
													"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
													"            }\r",
													"\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid} ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.genericLink;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) ) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}  - mfrLink (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"        if (Math.floor(responseCode / 100) === 2) {\r",
													"            responseObject = JSON.parse(response.stream);\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"core-model-1-4:link\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": {\r",
													"            \"oneOf\": [\r",
													"              {\r",
													"                \"description\": \"generic\",\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\r",
													"                  \"uuid\",\r",
													"                  \"layer-protocol-name\",\r",
													"                  \"link-direction\",\r",
													"                  \"forwarding-domain\",\r",
													"                  \"link-port\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"uuid\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"layer-protocol-name\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"link-direction\": {\r",
													"                    \"type\": \"string\",\r",
													"                    \"enum\": [\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_BIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_UNIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_OMNIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:FORWARDING_DIRECTION_UNDEFINED_OR_UNKNOWN\"\r",
													"                    ]\r",
													"                  },\r",
													"                  \"forwarding-domain\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                      \"type\": \"string\"\r",
													"                    }\r",
													"                  },\r",
													"                  \"link-port\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                      \"oneOf\": [\r",
													"                        {\r",
													"                          \"description\": \"generic\",\r",
													"                          \"type\": \"object\",\r",
													"                          \"required\": [\r",
													"                            \"local-id\",\r",
													"                            \"link-port-direction\",\r",
													"                            \"logical-termination-point\"\r",
													"                          ],\r",
													"                          \"properties\": {\r",
													"                            \"local-id\": {\r",
													"                              \"type\": \"string\"\r",
													"                            },\r",
													"                            \"link-port-direction\": {\r",
													"                              \"type\": \"string\",\r",
													"                              \"enum\": [\r",
													"                                \"core-model-1-4:PORT_DIRECTION_INPUT\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_OUTPUT\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_BIDIRECTIONAL\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_OMNIDIRECTIONAL\",\r",
													"                                \"core-model-1-4:PORT_DIRECTION_UNIDENTIFIED_OR_UNKNOWN\"\r",
													"                              ]\r",
													"                            },\r",
													"                            \"logical-termination-point\": {\r",
													"                              \"type\": \"string\"\r",
													"                            }\r",
													"                          }\r",
													"                        }\r",
													"                      ]\r",
													"                    }\r",
													"                  }\r",
													"                }\r",
													"              },\r",
													"              {\r",
													"                \"description\": \"minimum for rest\",\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\r",
													"                  \"uuid\",\r",
													"                  \"layer-protocol-name\",\r",
													"                  \"end-point-list\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"uuid\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"layer-protocol-name\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"end-point-list\": {\r",
													"                    \"type\": \"array\",\r",
													"                    \"items\": {\r",
													"                      \"type\": \"object\",\r",
													"                      \"required\": [\r",
													"                        \"control-construct\",\r",
													"                        \"logical-termination-point\",\r",
													"                        \"layer-protocol\"\r",
													"                      ],\r",
													"                      \"properties\": {\r",
													"                        \"control-construct\": {\r",
													"                          \"type\": \"string\"\r",
													"                        },\r",
													"                        \"logical-termination-point\": {\r",
													"                          \"type\": \"string\"\r",
													"                        },\r",
													"                        \"layer-protocol\": {\r",
													"                          \"type\": \"string\"\r",
													"                        }\r",
													"                      }\r",
													"                    }\r",
													"                  }\r",
													"                }\r",
													"              }\r",
													"            ]\r",
													"          }\r",
													"        }\r",
													"      }\r",
													"    };\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(\"/core-model-1-4:network-control-domain=cache/link={uuid} could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(200)\r",
													"        });\r",
													"        if (responseCode == 200) {\r",
													"            logger.log(\"  - ok: /core-model-1-4:network-control-domain=cache/link={uuid} could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: /core-model-1-4:network-control-domain=cache/link={uuid} provided \" + responseCode + \" instead of 200\")\r",
													"        }\r",
													"\r",
													"        if (Object.keys(responseObject).length != 0) {\r",
													"            logger.log(\"Reference Schema:\");\r",
													"            logger.log(reference);\r",
													"\r",
													"            logger.log(\"Interface Response:\");\r",
													"            logger.log(responseObject);\r",
													"\r",
													"            let validationResult;\r",
													"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"            logger.log(\"Validation Result:\");\r",
													"            logger.log(validationResult);\r",
													"\r",
													"            pm.test(\"Response matches schema definition\", function () {\r",
													"                pm.expect(validationResult.errors.length).to.equal(0)\r",
													"            });\r",
													"            if (validationResult.errors.length == 0) {\r",
													"                logger.log(\"  - ok: Response matches schema definition\")\r",
													"            } else {\r",
													"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
													"            }\r",
													"\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid} ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.mfrLink;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) ) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"        if (Math.floor(responseCode / 100) === 2) {\r",
													"            responseObject = JSON.parse(response.stream);\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"var reference;\r",
													"try {\r",
													"    reference = {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"core-model-1-4:link-port\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": {\r",
													"            \"oneOf\": [\r",
													"              {\r",
													"                \"description\": \"generic\",\r",
													"                \"type\": \"object\",\r",
													"                \"required\": [\r",
													"                  \"local-id\",\r",
													"                  \"link-port-direction\",\r",
													"                  \"logical-termination-point\"\r",
													"                ],\r",
													"                \"properties\": {\r",
													"                  \"local-id\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"link-port-direction\": {\r",
													"                    \"type\": \"string\",\r",
													"                    \"enum\": [\r",
													"                      \"core-model-1-4:PORT_DIRECTION_INPUT\",\r",
													"                      \"core-model-1-4:PORT_DIRECTION_OUTPUT\",\r",
													"                      \"core-model-1-4:PORT_DIRECTION_BIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:PORT_DIRECTION_OMNIDIRECTIONAL\",\r",
													"                      \"core-model-1-4:PORT_DIRECTION_UNIDENTIFIED_OR_UNKNOWN\"\r",
													"                    ]\r",
													"                  },\r",
													"                  \"logical-termination-point\": {\r",
													"                    \"type\": \"string\"\r",
													"                  }\r",
													"                }\r",
													"              }\r",
													"            ]\r",
													"          }\r",
													"        }\r",
													"      }\r",
													"    };\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! reference could not be defined.\")\r",
													"}\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(\"/core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(200)\r",
													"        });\r",
													"        if (responseCode == 200) {\r",
													"            logger.log(\"  - ok: /core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: /core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} provided \" + responseCode + \" instead of 200\")\r",
													"        }\r",
													"\r",
													"        if (Object.keys(responseObject).length != 0) {\r",
													"            logger.log(\"Reference Schema:\");\r",
													"            logger.log(reference);\r",
													"\r",
													"            logger.log(\"Interface Response:\");\r",
													"            logger.log(responseObject);\r",
													"\r",
													"            let validationResult;\r",
													"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
													"            logger.log(\"Validation Result:\");\r",
													"            logger.log(validationResult);\r",
													"\r",
													"            pm.test(\"Response matches schema definition\", function () {\r",
													"                pm.expect(validationResult.errors.length).to.equal(0)\r",
													"            });\r",
													"            if (validationResult.errors.length == 0) {\r",
													"                logger.log(\"  - ok: Response matches schema definition\")\r",
													"            } else {\r",
													"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
													"            }\r",
													"\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} ================================================\");\r",
													"\r",
													"\r",
													"// the linkPort is only part of the genericLink schema\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var linkPort;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.genericLink;\r",
													"    linkPort = collectionInfo.linkPort\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId + \"/link-port=\" + linkPort;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) && (linkPort!=\"\") && (linkPort!=undefined)) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} (204)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"// returns 204, so no responseBody to be checked\r",
													"var operationName = \"/core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId}\";\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(operationName + \" could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(204)\r",
													"        });\r",
													"        if (responseCode == 204) {\r",
													"            logger.log(\"  - ok: \" + operationName + \" could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 204\")\r",
													"        }\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid}/link-port={localId} ================================================\");\r",
													"\r",
													"\r",
													"// the linkPort is only part of the genericLink schema\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var linkPort;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.genericLink;\r",
													"    linkPort = collectionInfo.linkPort\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId + \"/link-port=\" + linkPort;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) && (linkPort!=\"\") && (linkPort!=undefined)) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid} (genericLink) (204)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"// returns 204, so no responseBody to be checked\r",
													"var operationName = \"/core-model-1-4:network-control-domain=cache/link={uuid}\";\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(operationName + \" could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(204)\r",
													"        });\r",
													"        if (responseCode == 204) {\r",
													"            logger.log(\"  - ok: \" + operationName + \" could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 204\")\r",
													"        }\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid} ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.genericLink;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) ) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/core-model-1-4:network-control-domain=cache/link={uuid} (mfrLink) (204)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"var uri;\r",
													"var dummyUri;\r",
													"try {\r",
													"    uri = pm.variables.get(\"uri\");\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let dummyServerInfo;\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
													"    dummyUri = dummyServerInfo.dummyUri;\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Extracting Result\r",
													"****************************************************************************************/\r",
													"var responseCode;\r",
													"var responseObject = {};\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        let response;\r",
													"        response = pm.response;\r",
													"\r",
													"        responseCode = parseInt(response.code);\r",
													"\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! result could not be extracted.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"// returns 204, so no responseBody to be checked\r",
													"var operationName = \"/core-model-1-4:network-control-domain=cache/link={uuid}\";\r",
													"\r",
													"try {\r",
													"    if (uri != dummyUri) {\r",
													"        logger.log(\"Analysis:\");\r",
													"\r",
													"        pm.test(operationName + \" could be executed\", function () {\r",
													"            pm.expect(responseCode).to.equal(204)\r",
													"        });\r",
													"        if (responseCode == 204) {\r",
													"            logger.log(\"  - ok: \" + operationName + \" could be executed\")\r",
													"        } else {\r",
													"            logger.log(\"  - FAIL: \" + operationName + \" provided \" + responseCode + \" instead of 204\")\r",
													"        }\r",
													"    }\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! validation could not be completely executed.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Collection Variables\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for (let i = 0; i < serverList.length; i++) {\r",
													"            if (serverList[i].serverName == searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"logger.struc(\"\\n===== /core-model-1-4:network-control-domain=cache/link={uuid} ================================================\");\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Loading Input Data\r",
													"****************************************************************************************/\r",
													"\r",
													"var linkId;\r",
													"var serverInfo = {};\r",
													"var dummyServerInfo = {};\r",
													"try {\r",
													"    let collectionInfo;\r",
													"    let collectionInputList;\r",
													"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
													"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
													"\r",
													"    linkId = collectionInfo.mfrLink;\r",
													"\r",
													"    let serverList;\r",
													"    serverList = pm.environment.get(\"serverList\");\r",
													"    let serverToBeApplied;\r",
													"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
													"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
													"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Input data could not be loaded.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Processing\r",
													"****************************************************************************************/\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Setting Local Variables and Preparing the Request\r",
													"****************************************************************************************/\r",
													"try {\r",
													"    let servicePath;\r",
													"    servicePath = \"/core-model-1-4:network-control-domain=cache/link=\" + linkId;\r",
													"\r",
													"    let server;\r",
													"    server = serverInfo.server;\r",
													"\r",
													"    let uri;\r",
													"    if ( (linkId!=\"\") && (linkId!=undefined) ) {\r",
													"        uri = server + servicePath;\r",
													"    } else {\r",
													"        logger.warn(\"Input data incomplete.\");\r",
													"        uri = dummyServerInfo.dummyUri\r",
													"    }\r",
													"\r",
													"    let requestBody;\r",
													"    requestBody = '{'\r",
													"    +'}';\r",
													"\r",
													"\r",
													"    pm.variables.clear();\r",
													"\r",
													"    pm.variables.set(\"uri\", uri);\r",
													"    pm.variables.set(\"requestBody\", requestBody);\r",
													"    \r",
													"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
													"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
													"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
													"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
													"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
													"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
													"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
													"\r",
													"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
													"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
													"\r",
													"} catch (error) {\r",
													"    logger.error(\"! Local variables could not be set.\")\r",
													"}\r",
													"\r",
													"\r",
													"/****************************************************************************************\r",
													"* Functions\r",
													"****************************************************************************************/\r",
													"function ExtractServerInformation(serverList, searchedServerName) {\r",
													"    try {\r",
													"        for(let i=0; i<serverList.length; i++) {\r",
													"            if(serverList[i].serverName==searchedServerName) {\r",
													"                return serverList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! serverList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Server could not be found in serverList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
													"    try {\r",
													"        for(let i=0; i<collectionInputList.length; i++) {\r",
													"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
													"                return collectionInputList[i]\r",
													"            }\r",
													"        }\r",
													"    } catch (error) {\r",
													"        logger.error(\"! collectionInputList not found or faulty\");\r",
													"        return {}\r",
													"    }\r",
													"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
													"    return {}\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{uri}}",
											"host": [
												"{{uri}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Prerequisites:\n\n- Linkport data is only available for generic links. To put linkport data, the link under which the port data shall be put must already be available in the cache!\n    \n- Link and linkport data are not derived from devices, but need to be added to the MWDI cache by an additional application, which is not yet existing\n    \n    - the tests first put some data, which then is read and deleted, i.e. if get and delete fail, verify that the put worked first (so far there are no checks for that included here!)"
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}